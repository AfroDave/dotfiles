" Plugins
call plug#begin('~/.vim/plugged')

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

Plug 'ajh17/Spacegray.vim'

Plug 'bling/vim-airline'
Plug 'bronson/vim-visual-star-search'
Plug 'gorkunov/smartpairs.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'Raimondi/delimitMate'
Plug 'rhysd/clever-f.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

Plug 'kien/ctrlp.vim'
Plug 'sgur/ctrlp-extensions.vim'
Plug 'tacahiroy/ctrlp-funky'

Plug 'tikhomirov/vim-glsl'

Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'

Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

Plug 'vim-scripts/fcitx.vim'

call plug#end()

" General
set nocompatible
filetype plugin indent on
syntax enable

set background=dark
if has('gui_running')
    let g:rehash256=1
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guifont=ttyp0\ 11
    colorscheme spacegray
else
    set t_Co=256
    colorscheme spacegray
endif

set fileformats=unix,dos,mac
set encoding=utf-8
setglobal fileencoding=utf-8
set fileencodings=utf-8
scriptencoding utf-8

set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=block
set hidden

set backup
set noswapfile
set undofile
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
set undodir=~/.vim/tmp/undo

set mouse=a
set mousehide
set cursorline
set colorcolumn=81
set lazyredraw
set ttyfast
if !has('nvim')
    set ttymouse=xterm2
endif

set showcmd
set laststatus=2

set backspace=2
set showmatch
set matchpairs+=<:>
set hlsearch | nohlsearch
set incsearch
set ignorecase
set smartcase

set wildmode=longest:full,full

set wildignore+=.hg,.git,.svn,*.pyc,.tags

set completeopt-=preview

set whichwrap=b,s,h,l,<,>,[,]
set scrolloff=5

set foldmethod=marker
set foldopen+=jump

set timeoutlen=500
set ttimeout
set ttimeoutlen=50

set autoread
set number
set relativenumber

set spelllang=en_gb

set tags=./.tags;

set linebreak
set autoindent
set smartindent
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
set shiftround
set splitright
set splitbelow
set synmaxcol=240

set list
set listchars=tab:›\ ,trail:·,extends:»,precedes:«,nbsp:×

if has('nvim')
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
else
    let &t_SI .= "\<Esc>[5 q"
    let &t_EI .= "\<Esc>[1 q"
endif

" Bindings
nn <Space> <Nop>
let mapleader=' '
let maplocalleader=' '
let g:mapleader=' '

nn Y y$
vn < <gv
vn > >gv

nn <silent> j jzz
nn <silent> k kzz
nn <silent> <Tab> :bn<Cr>
nn <silent> <S-Tab> :bp<Cr>
nn <silent> <Leader>bn :bn<Cr>
nn <silent> <Leader>bp :bp<Cr>
nn <silent> <Leader>bs :split<Cr>
nn <silent> <Leader>bv :vsp<Cr>
nn <silent> <Leader>bd :bd<Cr>
nn <silent> <Leader>cc :clo<Cr>
nn <silent> <Leader>l <C-W>l
nn <silent> <Leader>h <C-W>h
nn <silent> <Leader>k <C-W>k
nn <silent> <Leader>j <C-W>j

if has('nvim')
    tnoremap <silent> <Esc> <C-\><C-n>
    tnoremap <silent> <Leader>bn :bn<Cr>
    tnoremap <silent> <Leader>bp :bp<Cr>
endif

ino <silent> jk <Esc>

nn <silent> <Leader>S :set spell!<Cr>

nn <silent> <Leader>cs :call StripTrailingWhitespace()<Cr>

nn q: <Nop>

" Functions
function! StripTrailingWhitespace()
    normal mZ
    %s/\s\+$//e
    normal `Z
endfunction

function! RestoreCursor()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup restore_cursor
    autocmd!
    autocmd BufWinEnter * call RestoreCursor()
augroup end

augroup filetype_cpp
    autocmd!
    autocmd FileType c,cpp syn keyword StorageClass local global
    autocmd FileType c,cpp syn keyword Statement elif loop
    autocmd FileType c,cpp syn keyword Type i8 i16 i32 i64 i128
    autocmd FileType c,cpp syn keyword Type u8 u16 u32 u64 u128
    autocmd FileType c,cpp syn keyword Type f32 f64 f128
    autocmd FileType c,cpp syn keyword Type b32 usize isize
    autocmd FileType c,cpp syn keyword Type GLbyte GLubyte GLshort GLushort
    autocmd FileType c,cpp syn keyword Type GLint GLuint GLint64 GLuint64
    autocmd FileType c,cpp syn keyword Type GLsizei GLenum GLintptr GLsizeiptr
    autocmd FileType c,cpp syn keyword Type GLfloat GLdouble GLhalf GLboolean

    autocmd FileType c,cpp syn match Type '\w\+_t\>'
    autocmd FileType c,cpp syn match Type '\w\+_fn\>'
    autocmd FileType c,cpp syn match cCustomParen "(" contains=cParen contains=cCppParen
    autocmd FileType c,cpp syn match cCustomFunc "\w\+\s*(\@=" contains=cCustomParen
    autocmd FileType c,cpp hi def link cCustomFunc Function
augroup end

" Plugin Config

" CtrlP
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_custom_ignore={
    \ 'dir':  '\v[\/](\.git|\.hg|\.svn|bin|extern|res)$',
    \ 'file': '\v\.(exe|so|dll|pyc|o|png|jpg|tar|gz|bz2|xz|zip|rar)$' }
let g:ctrlp_funky_syntax_highlight=1

nn <Leader>bb :CtrlPBuffer<Cr>
nn <Leader>o :CtrlPFunky<Cr>
nn <Leader>t :CtrlPBufTagAll<Cr>
nn <Leader>ct :CtrlPTag<Cr>
nn <Leader>y :CtrlPYankring<Cr>

" Airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='wombat'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod=':t'

" IncSearch
let g:incsearch#auto_nohlsearch=1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Multiple-Cursors
let g:multi_cursor_prev_key='<C-M>'

" Pandoc
let g:pandoc#syntax#conceal#use=0
let g:pandoc#modules#disabled = [ "folding" ]

" DelimitMate
let delimitMate_expand_cr=1
let delimitMate_matchpairs = '(:),[:],{:}'

" Dispatch
augroup filetype_c
    autocmd!
    nn <silent> gmm :Dispatch ./BUILD<Cr>
    nn <silent> gmr :Dispatch ./RUN<Cr>
    nn <silent> gmg :Dispatch ./RUN g<Cr>
    nn <silent> gmt :Dispatch ./TEST<Cr>
augroup end

" Local Config
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
