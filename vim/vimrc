" Plugins
call plug#begin('~/.vim/plugged')

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

Plug 'w0ng/vim-hybrid'
Plug 'nice/sweater'

Plug 'airblade/vim-gitgutter'
Plug 'bronson/vim-visual-star-search'
Plug 'cohama/lexima.vim'
Plug 'gorkunov/smartpairs.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'rhysd/clever-f.vim'
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'Yggdroot/indentLine'

Plug 'kien/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'sgur/ctrlp-extensions.vim'
Plug 'tacahiroy/ctrlp-funky'

Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'bling/vim-airline'

Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'tikhomirov/vim-glsl'

Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'rstacruz/sparkup'

Plug 'tpope/vim-fireplace'
Plug 'guns/vim-clojure-static'

Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'

Plug 'hdima/python-syntax'
Plug 'mitsuhiko/jinja2'

Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

call plug#end()

" General
set nocompatible
filetype plugin indent on
syntax enable

set background=dark
if has('gui_running')
    let g:rehash256=1
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guifont=ttyp0\ 11
    colorscheme hybrid
else
    set t_Co=256
    let g:hybrid_use_Xresources=1
    colorscheme hybrid
endif

set fileformats=unix,dos,mac
set encoding=utf-8
setglobal fileencoding=utf-8
set fileencodings=utf-8
scriptencoding utf-8

set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=block
set hidden

set backup
set noswapfile
set undofile
set backupdir=~/.vim/tmp/backup
set directory=~/.vim/tmp/swap
set undodir=~/.vim/tmp/undo

set mouse=a
set mousehide
set cursorline
set colorcolumn=81
set lazyredraw
set ttyfast
if !has('nvim')
    set ttymouse=xterm2
endif

set showcmd
set laststatus=2

set backspace=2
set showmatch
set matchpairs+=<:>
set hlsearch | nohlsearch
set incsearch
set ignorecase
set smartcase

set wildmode=longest:full,full

set wildignore+=.hg,.git,.svn,*.pyc,.tags

set completeopt-=preview

set whichwrap=b,s,h,l,<,>,[,]
set scrolloff=5

set foldmethod=marker
set foldopen+=jump

set timeoutlen=500
set ttimeout
set ttimeoutlen=50

set autoread
set autochdir
set number

set spelllang=en_gb

set tags=./.tags;

set linebreak
set autoindent
set smartindent
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4
set smarttab
set shiftround
set splitright
set splitbelow
set synmaxcol=240

set list
set listchars=tab:›\ ,trail:·,extends:»,precedes:«,nbsp:×

let &t_SI .= "\<Esc>[5 q"
let &t_EI .= "\<Esc>[1 q"

" Bindings
nn <Space> <Nop>
let mapleader=' '
let maplocalleader=' '
let g:mapleader=' '

nn Y y$
vn < <gv
vn > >gv

nn <silent> j jzz
nn <silent> k kzz
nn <silent> <Tab> :bn<Cr>
nn <silent> <S-Tab> :bp<Cr>
nn <silent> <Leader>bs :split<Cr>
nn <silent> <Leader>bv :vsp<Cr>
nn <silent> <Leader>bd :bd<Cr>
nn <silent> <Leader>cc :clo<Cr>
nn <silent> <Leader>l <C-W>l
nn <silent> <Leader>h <C-W>h
nn <silent> <Leader>k <C-W>k
nn <silent> <Leader>j <C-W>j

ino <silent> jk <Esc>

nn <silent> <Leader>S :set spell!<Cr>

nn <silent> <Leader>cs :call StripTrailingWhitespace()<Cr>

nn q: <Nop>

" Functions
function! StripTrailingWhitespace()
    normal mZ
    %s/\s\+$//e
    normal `Z
endfunction

function! RestoreCursor()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup restore_cursor
    autocmd!
    autocmd BufWinEnter * call RestoreCursor()
augroup end

" Plugin Config

" CtrlP
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_custom_ignore={
    \ 'dir':  '\v[\/](\.git|\.hg|\.svn|build|bin)$',
    \ 'file': '\v\.(exe|so|dll|pyc|o|png|jpg|tar|gz|bz2|xz|zip|rar)$' }
let g:ctrlp_match_func={ 'match': 'pymatcher#PyMatch' }
let g:ctrlp_funky_syntax_highlight=1

nn <Leader>b :CtrlPBuffer<Cr>
nn <Leader>o :CtrlPFunky<Cr>
nn <Leader>t :CtrlPTag<Cr>
nn <Leader>y :CtrlPYankring<Cr>

" YouCompleteMe
let g:acp_enableAtStartup=0
let g:ycm_key_invoke_completion='<C-a>'
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_confirm_extra_conf=0
let g:ycm_global_ycm_extra_conf="~/.vim/.ycm_extra_conf.py"
let g:ycm_add_preview_to_completeopt=0
let g:ycm_autoclose_preview_window_after_completion=1

" UltiSnips
let g:UltiSnipsExpandTrigger='<C-j>'
let g:UltiSnipsJumpForwardTrigger='<C-j>'
let g:UltiSnipsJumpBackwardTrigger='<C-k>'

" IndentLine
let g:indentLine_char='┊'
let g:indentLine_fileTypeExclude=['clojure', 'cpp', 'c']

" Airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='hybridline'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#fnamemod=':t'

" Python-Syntax
let python_highlight_all=1

" Syntastic
let g:syntastic_mode_map={ 'mode': 'passive' }
let g:syntastic_cpp_compiler_options=' -std=c++1y'
let g:syntastic_enable_signs=1

" IncSearch
let g:incsearch#auto_nohlsearch=1
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" UndoTree
nn <silent> <Leader>ut :UndotreeToggle<Cr>

" Multiple-Cursors
let g:multi_cursor_prev_key='<C-M>'

" EasyMotion
map <Leader> <Plug>(easymotion-prefix)

" Local Config
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
